Ejercicio 1: Verificar la Instalación de Git
¿Qué comando debes usar para verificar la versión de Git?
git -v


Ejercicio 2: Crear un Directorio de Trabajo
¿Qué comando usas para crear un nuevo directorio?
mkdir <nombre-directorio>

¿Cómo puedes cambiar a un directorio específico desde la terminal?
Con el comando: cd <ruta_del_archivo>


Ejercicio 3: Inicializar un Repositorio Git
¿Qué comando usas para inicializar Git en un directorio?
git init

¿Cómo puedes confirmar que Git ha sido inicializado correctamente?
Con el comando git status puedo verificar el estado del repositorio.
Si quiero verificar que se a inicializado el repositorio creandose la carpeta .git en mi directorio
uso el comando -ls -la o Get-ChildItem -Hidden pues este se crea como un archivo oculto.


Ejercicio 4: Comprobar el Estado del Repositorio
¿Qué comando usas para comprobar el estado del repositorio?
git status

¿Qué significa cuando Git dice que no hay archivos rastreados?
Quiere decir que no hemos añadido ningún archivo al area de preparación.


Ejercicio 5: Crear un Archivo y Verificar el Estado
¿Qué comando usas para crear un archivo nuevo desde la terminal?
echo "contenido" > nombre-archivo.md 

¿Qué diferencia observas en el estado del repositorio después de crear el archivo?
El archivo creado anteriormente README.md no esta rastreado y debe añadirse con git add para luego hacer commit.



Ejercicio 6: Añadir un Archivo al Área de Preparación
¿Qué comando usas para añadir un archivo al área de preparación?
git add <nobre-archivo>

¿Qué significa añadir un archivo al área de preparación?
Significa que estamos añadiendo ese archivo o preparándolo para luego ser guardado en el historial de versiones.


Ejercicio 7: Realizar un Commit
¿Qué comando usas para realizar un commit?
git commit -m "mensaje"

¿Por qué es importante incluir un mensaje claro en cada commit?
Es importante pues nos ayuda a identificar rapidamente los cambios realizados.


Ejercicio 8: Ver el Historial de Commits
¿Qué comando usas para ver el historial de commits?
git log 

¿Qué información muestra el historial de commits?
Nos muestra el commit realizado con su id hash, el autor, la fecha y el mensaje del commit.


Ejercicio 9: Crear una Nueva Rama
¿Qué comando usas para crear una nueva rama en Git?
git branch <nombre-rama>

¿Qué diferencia hay entre crear una rama y moverte a ella?
La diferencia es obvia, al crear una rama estamos añadiéndola y movernos a ella significa que nos posicionamos en ella para poder trabajar en la rama.


Ejercicio 10: Listar Todas las Ramas
¿Qué comando usas para listar todas las ramas en Git?
git branch

¿Cómo puedes identificar en qué rama estás trabajando actualmente?
La rama en la que estoy trabajando se muestra diferenciada visualmente al ejecutar el comando anterior con un asterisco y en color verde.


Ejercicio 11: Cambiar a una Rama Existente
¿Qué comando usas para cambiar de rama?
git checkout <nombre-rama>

¿Cómo puedes confirmar en qué rama estás trabajando?
Con el comando mencionado en preguntas anteriores: git branch


Ejercicio 12: Crear y Cambiar a una Nueva Rama en un Solo Paso
¿Qué comando permite crear y cambiar a una nueva rama en un solo paso?
git checkout -b <nombre-rama>

¿Cuál es la ventaja de usar este comando?
Es más rápido pues nos permite hacer en un solo paso lo que antes haciamos en dos.


Ejercicio 13: Añadir Archivos al Área de Preparación con un Comando Abreviado
¿Qué comando abreviado puedes usar para añadir todos los cambios al área de preparación?
git add . 

¿Qué ventajas tiene usar este comando en lugar de añadir archivos individualmente?
Nos permite añadir todos los archivos de una manera más rápida y eficiente que uno por uno.


Ejercicio 14: Realizar un Commit con un Mensaje Descriptivo
¿Qué comando usas para realizar un commit?
git commit -m "mensaje"

¿Por qué es importante escribir mensajes descriptivos en los commits?
Es importante pues nos ayuda a identificar rapidamente los cambios realizados.


Ejercicio 15: Fusionar Ramas
¿Qué comando usas para fusionar ramas en Git?
Usamos dos comandos, uno para posicionarnos en la rama en la que queremos fusionar los cambios(git checkout main) y 
otro para fusionar las ramas (git merge mejoras-ui).

¿Qué sucede si hay conflictos durante la fusión?
Deberemos resolver los conflictos en el código para poder completar la fusión.


Ejercicio 16: Resolver Conflictos entre Ramas
¿Qué ocurre cuando Git detecta un conflicto durante la fusión?
Nos da un error y nos dice que no es posible fusionar las ramas, nos sugiere corregirlos y luego usar git add/rm <file>.
Además en el Visual Code Studio nos muestra un mensaje en las lineas del código que entran en conflicto, en este caso:
<<<<<<< HEAD
Ejercicio 2: Verificar la Instalación de Git
=======
Ejercicio 3: Verificar la Instalación de Git
>>>>>>> conflicto-test

¿Cómo puedes resolver un conflicto en Git?
Modificando las lineas de código que entran en conflicto.


Ejercicio 17: Crear un Archivo .gitignore
¿Qué es un archivo .gitignore y para qué sirve?
Un archivo .gitignore nos permite excluir del rastreo de git los archivos que queramos como logs, carpeta de dependencias de node_modules, etc.

¿Cómo puedes especificar qué tipos de archivos deben ser ignorados?
Dentro del archivo especificamos estos archivos a través de su extensión o del propio nombre del archivo si solo es uno y queremos que los demás
archivos que tengamos con la misma extensión se incluyan en el rastreo.


Ejercicio 18: Configurar Git para Ignorar Cambios en un Archivo Específico
¿Cómo puedes hacer que Git ignore los cambios en un archivo específico sin eliminarlo del repositorio?
Con el comando git update-index --assume-unchanged <nombre-archivo>.

¿En qué situaciones sería útil esta técnica?
Por ejemplo cuando cada persona que trabaja en el proyecto necesita un archivo de configuración local personalizada.


Ejercicio 19: Clonar un Repositorio Remoto
¿Qué comando usas para clonar un repositorio remoto?
git clone <url-repositorio>

¿Qué diferencia hay entre clonar un repositorio y crear uno nuevo?
Cuando clonamos un respositorio necesitamos que este ya este creado previamente y lo que hacemos es descargarlo en local desde el remoto.


Ejercicio 20: Conectarte a GitHub con SSH
¿Qué es SSH y por qué es importante para trabajar con GitHub?
SSH es un protocolo de comunicación que nos permite tener una conexión cifrada entre el ordenador y un servidor remoto.
Para trabajar con github es importante pues nos permite realizar acciones de git(clonar, push, pull...) en el repositorio sin tener que autentificarnos cada vez.

¿Cómo puedes generar una clave SSH en tu computadora?
Podemos seguir la guía de la propia pagina de github -> https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
Descrito en pasos:
1. Ejecutar el comando: ssh-keygen -t ed25519 -C "your_email@example.com"
2. Seguir los pasos tras ejecutar el comando que salen en consola para la configuración de la contraseña como directorio donde se genera y password.
3. Debemos ejecutar una terminal con permisos de administrador para iniciar el agente SSH en el PC con el siguiente comando: 
# start the ssh-agent in the background
Get-Service -Name ssh-agent | Set-Service -StartupType Manual
Start-Service ssh-agent
4. Agregar la clave publica al agente en una terminal sin permisos elevados: 
ssh-add c:/Users/YOU/.ssh/id_ed25519

Agregar clave ssh a la cuenta de github:
1. Copiar la clave pública al portapapeles: 
$ cat ~/.ssh/id_ed25519.pub | clip
2. Ir a la configuración de GitHub y añadir la clave en la sección Deploy Keys.


Ejercicio 21: Subir Cambios Locales a GitHub
¿Qué comando usas para asociar un repositorio local con uno remoto?
git remote add origin <url-repositorio>

¿Qué comando usas para subir cambios locales a un repositorio remoto?
git push -u origin <rama-principal>


Ejercicio 22: Actualizar tu Repositorio Local desde GitHub
¿Qué comando usas para descargar cambios del repositorio remoto?
git pull  //descarga los cambios del remoto y los fusiona con el local.
git fetch //descarga los cambios pero no los fusiona.

¿Qué pasa si hay conflictos al sincronizar los cambios?
Deberemos modificar los conflictos del código manualmente al igual que cuando fusionamos varias ramas y estas entran en conflicto.


Ejercicio 23: Crear una Rama en GitHub
¿Cómo puedes subir una rama local a un repositorio remoto?
git checkout <rama-local> //Debemos posicionarnos primero en la rama
git push -u origin <rama-local>

¿Cómo puedes verificar que la rama ha sido creada correctamente en GitHub?
Con el comando: git branch -r //muestra las ramas en remoto


Ejercicio 24: Eliminar una Rama Local
¿Qué comando usas para eliminar una rama local?
git branch -d <rama-local>

¿Es posible recuperar una rama eliminada?
Si, tenemos que recuperar el hash del commit en el que eliminamos la rama:
git reflog o git log
Seguidamente podemos restaurar la rama con el comando:
git checkout -b <rama-local> <hash del commit>


Ejercicio 25: Eliminar una Rama Remota
¿Cómo puedes eliminar una rama remota?
git push origin --delete <rama>

¿Qué precauciones debes tomar antes de eliminar una rama remota?
Revisar si la rama contiene cambios no actualizados en la rama principal, esto podemos verlo si lo último que se
hizo en la rama fue fusionarla con la principal o ejecutando el comando git diff. Debemos verificar también que no 
haya nadie más que siga trabajando en la rama.


Ejercicio 26: Crear una Pull Request en GitHub
¿Qué es una pull request y para qué sirve?
Es una petición a los administradores de la rama principal para que revisen los cambios realizados en la rama y puedan 
fusionarlos con esta.

¿Qué información debes incluir en una pull request?
Titulo descriptivo, descripción de los cambios y por qué, referenciar a la tarea asignada para ese cambio.


Ejercicio 27: Revisar y Comentar una Pull Request
¿Cómo puedes revisar una pull request en GitHub?
En el apartado del repositorio(tabla de navegación) Pull Request.

¿Qué tipo de comentarios son útiles en una revisión?
Comentarios que ayuden a indentificar problemas que pueda haber con la propuesta y como solucionarlos para que no haya conflictos.
También pueden ser de mejora del código.


Ejercicio 28: Fusión Automática de una Pull Request
¿Cuándo puedes fusionar una pull request automáticamente?
Cuando no hay conflicto con los cambios realizados en las dos ramas.

¿Qué sucede después de fusionar una pull request?
La rama en la que se han realizado los cambios se fusiona con la rama principal(o en la que queramos fusionarlo).


Ejercicio 29: Descartar Cambios Locales
¿Qué comando usas para descartar cambios locales?
git checkout -- <archivo>

¿Cuándo es útil descartar cambios locales?
Cuando hice cambios locales y no quiero añadirlos en el proximo commit.


Ejercicio 30: Restaurar un Commit Anterior
¿Qué comando usas para restaurar un commit anterior?
git revert <id-del-commit>.

¿Qué precauciones debes tomar al restaurar un commit anterior?
Revisar que realmente es necesario deshacer el commit y que no entrara en conflicto con otros cambios realizados.


Linea de pruena para revertir el commit.